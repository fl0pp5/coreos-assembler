#!/usr/bin/env python3

from __future__ import annotations

import argparse
import dataclasses
import json
import logging
import os
import pathlib
import subprocess
import sys
import tempfile

import typing

import rpm

import cmdlib
import altcos

SR = cmdlib.import_env(cmdlib.STREAMS_ROOT_ENV)


@dataclasses.dataclass
class Package:
    __slots__ = ("_header",)

    _header: rpm.hdr

    def __str__(self) -> str:
        return f"{self.name}-{self.version}-{self.release}"

    def __eq__(self, other: Package) -> bool:
        return rpm.versionCompare(self._header, other._header) == 0

    def __lt__(self, other: Package) -> bool:
        return rpm.versionCompare(self._header, other._header) == -1

    def __gt__(self, other: Package) -> bool:
        return rpm.versionCompare(self._header, other._header) == 1

    @property
    def name(self) -> str:
        return self._header[rpm.RPMTAG_NAME].decode()

    @property
    def version(self) -> str:
        return self._header[rpm.RPMTAG_VERSION].decode()

    @property
    def release(self) -> str:
        return self._header[rpm.RPMTAG_RELEASE].decode()

    @property
    def epoch(self) -> int:
        return self._header[rpm.RPMTAG_EPOCH]

    def to_dict(self) -> dict:
        return {
            "name": self.name,
            "version": self.version,
            "release": self.release,
            "epoch": self.epoch
        }


PackageMapping: typing.TypeAlias = dict[bytes, Package]


@dataclasses.dataclass
class UpdateDiff:
    __slots__ = ("new_pkg", "old_pkg")

    new_pkg: Package
    old_pkg: Package

    def to_dict(self) -> dict:
        return {
            "new": self.new_pkg.to_dict(),
            "old": self.old_pkg.to_dict(),
        }


def unique(a: PackageMapping, b: PackageMapping) -> PackageMapping:
    unique_names = set(a.keys()).difference(set(b.keys()))
    return {n: a[n] for n in unique_names}


def get_update_diff(a: PackageMapping, b: PackageMapping) -> list[UpdateDiff]:
    return [UpdateDiff(a[n], b[n])
            for n in a.keys() & b.keys() if a[n] > b[n]]


def read_db(dbpath: str | os.PathLike = None) -> PackageMapping:
    if dbpath:
        if not pathlib.Path(dbpath, "Packages").exists():
            logging.error(f"{dbpath} database not exists")
            sys.exit(1)

        rpm.addMacro("_dbpath", dbpath)

    pkgs = {hdr[rpm.RPMTAG_NAME]: Package(hdr) for hdr in rpm.TransactionSet().dbMatch()}

    if dbpath:
        rpm.delMacro("_dbpath")

    return pkgs


def read_commit_db(commit: altcos.Commit) -> PackageMapping:
    try:
        content = cmdlib.runcmd(f"ostree cat {commit} "
                                f"--repo={commit.repo.stream.ostree_bare_dir} /lib/rpm/Packages",
                                quite=True).stdout
    except subprocess.CalledProcessError:
        sys.exit(1)

    with tempfile.TemporaryDirectory(prefix="bdbdiff") as dbpath:
        pathlib.Path(dbpath, "Packages").write_bytes(content)
        return read_db(dbpath)


def handle(args: argparse.Namespace) -> None:
    stream = cmdlib.stream_from_ref(SR, args.ref)

    repository = altcos.Repository(stream).open()
    commit_a = altcos.Commit(repository, args.commit_a).open()
    commit_b = altcos.Commit(repository, args.commit_b).open()

    a = read_commit_db(commit_a)
    b = read_commit_db(commit_b)

    result_json = {
        "new": [pkg.to_dict() for _, pkg in unique(a, b).items()],
        "removed": [pkg.to_dict() for _, pkg in unique(b, a).items()],
        "updated": [diff.to_dict() for diff in get_update_diff(a, b)],
    }
    
    content = json.dumps(result_json, indent=args.indent)

    if args.add_to_version:
        diff_file = pathlib.Path(stream.vars_dir,
                                 commit_a.version().like_path,
                                 f"bdbdiff.json")

        with open(diff_file, "w+") as file:
            file.write(content)

    else:
        print(content)


def main() -> None:
    parser = argparse.ArgumentParser(description="Prints diff between two RPMs Berkley DB by commits.")
    parser.add_argument("ref",
                        help="OSTree reference (e.g. altcos/x86_64/sisyphus)")
    parser.add_argument("-ca", "--commit-a",
                        dest="commit_a", required=True)
    parser.add_argument("-cb", "--commit-b",
                        dest="commit_b", required=True)
    parser.add_argument("-i", "--indent", type=int)
    parser.add_argument("--add-to-version",
                        action="store_true",
                        help="Adds the packages diff to builds directory.")

    parser.set_defaults(handle=handle)

    args = parser.parse_args()
    args.handle(args)


if __name__ == '__main__':
    main()
