#!/usr/bin/env python3
import argparse
import pathlib
import typing

import pydantic

import cmdlib
import altcos

SR = cmdlib.import_env(cmdlib.STREAMS_ROOT_ENV)
BR = cmdlib.import_env(cmdlib.BUILDS_ROOT_ENV)

FormatMapping: typing.TypeAlias = dict[altcos.Format, altcos.Artifact]
PlatformMapping: typing.TypeAlias = dict[altcos.Platform, FormatMapping]
VersionMapping: typing.TypeAlias = dict[str, PlatformMapping]
StreamMapping: typing.TypeAlias = dict[str, VersionMapping]
ArchMapping: typing.TypeAlias = dict[str, StreamMapping]
BranchMapping: typing.TypeAlias = dict[altcos.Branch, ArchMapping]


class Collector:
    def __init__(self, branch: altcos.Branch) -> None:
        self.branch = branch
        self.root = pathlib.Path(BR, self.branch.value)

    def collect_artifact(self,
                         arch: altcos.Arch,
                         stream: str,
                         version: altcos.Version,
                         platform: altcos.Platform,
                         fmt: altcos.Format) -> altcos.Artifact:

        artifacts = [artifact for artifact in
                     self.root.glob(f"{arch}/{stream}/{version}/{platform}/{fmt}/*")]

        [location, signature, uncompressed, uncompressed_signature] = [None] * 4

        for artifact in artifacts:
            if artifact.name.endswith(".tar.gz.sig"):
                signature = artifact
            elif artifact.name.endswith(".tar.gz"):
                location = artifact
            elif artifact.name.endswith(".sig"):
                uncompressed_signature = artifact
            else:
                uncompressed = artifact

        return altcos.Artifact(altcos.Disk(location, signature, uncompressed, uncompressed_signature))

    def collect_format(self,
                       arch: altcos.Arch,
                       stream: str,
                       version: altcos.Version,
                       platform: altcos.Platform) -> FormatMapping:

        formats = {}
        for fmt in self.root.glob(f"{arch}/{stream}/{version}/{platform}/*"):
            fmt = altcos.Format(fmt.name)
            formats[fmt] = self.collect_artifact(arch, stream, version, platform, fmt)
        return formats

    def collect_platform(self,
                         arch: altcos.Arch,
                         stream: str,
                         version: altcos.Version) -> PlatformMapping:
        platforms = {}
        for platform in self.root.glob(f"{arch}/{stream}/{version}/*"):
            platform = altcos.Platform(platform.name)
            platforms[platform] = self.collect_format(arch, stream, version, platform)
        return platforms

    def collect_version(self,
                        arch: altcos.Arch,
                        stream: str) -> VersionMapping:
        versions = {}
        for version in self.root.glob(f"{arch}/{stream}/*"):
            version_name = f"{self.branch}_{stream}.{version.name}"
            versions[version.name] = self.collect_platform(arch,
                                                           stream,
                                                           altcos.Version.from_str(version_name))
        return versions

    def collect_stream(self, arch: altcos.Arch) -> StreamMapping:
        streams = {}
        for stream in self.root.glob(f"{arch}/*"):
            streams[stream.name] = self.collect_version(arch, stream.name)
        return streams

    def collect_arch(self) -> ArchMapping:
        architectures = {}
        for arch in self.root.glob("*"):
            arch = altcos.Arch(arch.name)
            architectures[arch.value] = self.collect_stream(arch)
        return architectures

    def collect(self) -> BranchMapping:
        return {self.branch: self.collect_arch()}


class SisyphusBuilds(pydantic.BaseModel):
    sisyphus: typing.Any


class P10Builds(pydantic.BaseModel):
    p10: typing.Any


def main() -> None:
    parser = argparse.ArgumentParser(description="Collects information on the stream.")
    parser.add_argument("branch")

    args = parser.parse_args()

    builds = {
        altcos.Branch.SISYPHUS: SisyphusBuilds,
        altcos.Branch.P10: P10Builds
    }

    branch = altcos.Branch(args.branch)
    summary = Collector(branch).collect()
    print(builds[branch].parse_obj(summary).json())


if __name__ == "__main__":
    main()
